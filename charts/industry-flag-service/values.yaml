#################################################################################
# Tractus-X - Industry Flag Service
#
# Copyright (c) 2025 CGI Deutschland B.V. & Co. KG
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# Default values for industry-flag-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

name: "industry-flag-service"
nameOverride: ""
fullnameOverride: ""

backend:
  enabled: true
  name: "ifs-backend"
  replicaCount: 1

  image:
    repository: 
    pullPolicy: Always
    tag: latest

  ingress:
    enabled: true
    ingressClassName: "nginx"
    className: "nginx"
    annotations:
      # kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts:
      - host: &hostname "TODO__XXX__YOUR_VALUE___XXX"
        paths:
          - path: /flags
            pathType: Prefix
          - path: /health
            pathType: Prefix
    tls:
      - secretName: default-ssl-certificate
        hosts:
          - *hostname

  # -- Existing image pull secret to use to [obtain the container image from private registries](https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry)
  imagePullSecrets:
    - name: acr-pull-secret
  podAnnotations: {}

  podSecurityContext:
    seccompProfile:
      # -- Restrict a Container's Syscalls with seccomp
      type: RuntimeDefault
    # -- Runs all processes within a pod with a special uid
    runAsUser: 1000
    # -- Processes within a pod will belong to this guid
    runAsGroup: 3000
    # -- The owner for volumes and any files created within volumes will belong to this guid
    fsGroup: 3000

  service:
    type: ClusterIP
    port: 8000

  authorization:
    enabled: true
    apiKey: 
      key: "X-Api-Key"
      value: ifs-api-key

  flags:
    - industry: chemicals

    - industry: automotive
      mimetype: application/json
      proof: >
        {
          "result": true
        }


  startup:
    checks: False
    refresh_interval: 10

  ifs:
    ## Refresh interval for the cache of applications
    refresh_interval: 1440
    ## DCT Type used to find the applications in the cache
    dct_type: "IndustryFlagService"
    ## JSON array of policies that are allowed to be used
    policies: >
      [
        {
          "odrl:permission": {
              "odrl:action": {
                  "@id": "odrl:use"
              },
              "odrl:constraint": {
                "odrl:leftOperand": {
                    "@id": "cx-policy:UsagePurpose"
                },
                "odrl:operator": {
                    "@id": "odrl:eq"
                },
                "odrl:rightOperand": "catenax.industryflagservice"
            }
          },
          "odrl:prohibition": [],
          "odrl:obligation": []
        }
      ]

  edc:
    url: "https://control.plane.url"
    apis:
      readiness: "/api/check/readiness"
      catalog: "/management/v3/catalog/request"
      edr_prefix: "/management/v2/edrs"
      view_edr: "/request"
      transfer_edr: "/dataaddress?auto_refresh=true"
      dsp: "/api/v1/dsp"

    oauth:
      apiKey: ""

    participantId: ""

    dct_type_key: "'http://purl.org/dc/terms/type'.'@id'"

    cache:
      expiration_time: 60

  discovery:
    url: "https://TODO__XXX__YOUR_VALUE___XXX.cofinity-x.com/api/v1.0/administration/connectors/discovery/search"
    keys:
      edc_discovery: "bpnl"

  catenax:
    centralidp:
      url: "https://TODO__XXX__YOUR_VALUE___XXX.cofinity-x.com/auth/"
      realm: CX-Central
      clientid: "TODO__XXX__YOUR_VALUE___XXX"
      clientsecret: "TODO__XXX__YOUR_VALUE___XXX"


  resources:
    { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  # The [container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container) defines privilege and access control settings for a Container within a pod
  securityContext:
    capabilities:
      # -- Specifies which capabilities to drop to reduce syscall attack surface
      drop:
        - ALL
      # -- Specifies which capabilities to add to issue specialized syscalls
      add: [ ]
    # -- Whether the root filesystem is mounted in read-only mode
    readOnlyRootFilesystem: true
    # -- Controls [Privilege Escalation](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privilege-escalation) enabling setuid binaries changing the effective user ID
    allowPrivilegeEscalation: false
    # -- Requires the container to run without root privileges
    runAsNonRoot: true
    # -- The container's process will run with the specified uid
    runAsUser: 1000
    # -- The owner for volumes and any files created within volumes will belong to this guid
    runAsGroup: 3000

  # -- specifies the volume mounts for the backend deployment
  volumeMounts:
    # -- mounted path for the backend configuration added in the config maps
    - name: ifs-backend-config
      mountPath: /backend/config
    # -- contains the location for the process data directory
    - name: pvc-ifs-backend
      mountPath: /backend/data
      subPath: data
    # -- contains the log directory uses by the backend
    - name: tmpfs
      mountPath: /backend/logs
      subPath: logs

  # -- volume claims for the containers
  volumes:
    # -- persist the backend configuration
    - name: ifs-backend-config
      configMap:
        name: "{{ .Release.Name }}-ifs-backend-config"
    # -- persist the backend data directories
    - name: pvc-ifs-backend
      persistentVolumeClaim:
        claimName: "{{ .Release.Name }}-pvc-ifs-backend-data"
    # -- temporary file system mount
    - name: tmpfs
      emptyDir: { }
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "secrets-provider"


frontend:
  name: "ifs-frontend"
  enabled: true
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: TODO__XXX__YOUR_VALUE___XXX/industry-flag-service-frontend
    # This sets the pull policy for images.
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest
  imagePullSecrets:
    - name: acr-pull-secret

  service:
    type: ClusterIP
    port: 8080

  configuration:
    backendUrl: "https://TODO__XXX__YOUR_VALUE___XXX"
    endpoints:
      getMyFlags: "/flags"
      getMyFlagProof: "/flags"
      searchCompanyFlags: "/flags/search"
      GetCompanyFlagProof: "/flags/proof"
    apiKey: "ifs-api-key"


  ingress:
    enabled: true
    ingressClassName: "nginx"
    className: "nginx"
    annotations:
      # kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      # nginx.ingress.kubernetes.io/rewrite-target: "/$2"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/service-upstream: "true"
    hosts:
      - host: &hostname "TODO__XXX__YOUR_VALUE___XXX"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: default-ssl-certificate
        hosts:
          - *hostname

  resources: { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe: null
    # httpGet:
    #   path: /
    #   port: http
  readinessProbe: null
    # httpGet:
    #   path: /
    #   port: http

  volumes: [ ]
  volumeMounts: [ ]

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: { }
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: secrets-store
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: "secrets-provider"

# Additional volumeMounts on the output Deployment definition.
volumeMounts: [ ]
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: { }

tolerations: [ ]

affinity: { }
